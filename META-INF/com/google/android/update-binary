#!/sbin/sh
#
# feature bundle dropper for package-sideload
#

OUT="/proc/self/fd/${2}"
ZIP="${3}"

workdir="/tmp/package-sideload-dropper.$$"
mpoint="${workdir}/mpoint"

ui_print() {
	echo -e "ui_print ${@}" >> ${OUT}
}

info() {
	ui_print "I: ${@}"
}

warning() {
	ui_print "W: ${@}"
}

error() {
	ui_print "E: ${@}"
	exit 1
}

cleanup() {
	if grep "${mpoint}" /proc/mounts; then
		info "Umounting rootfs"
		umount "${mpoint}"
	fi

	info "Cleanup"
	rm -r "${workdir}/META-INF" || true
	rm -f "${workdir}/payload.tar" || true
	rmdir "${mpoint}" || true
	rmdir "${workdir}" || true

	exit 0
}

# Search for the rootfs. hybris-mobian.img has priority over rootfs.img.
found_image=""
for image in hybris-mobian.img rootfs.img; do
	if [ -e /data/${image} ]; then
		found_image="/data/${image}"
		break
	fi
done

if [ -z "${found_image}" ]; then
	error "No hybris-mobian image found"
else
	info "Found image ${found_image}"
fi

mkdir -p "${mpoint}"

# Mount rootfs
info "Mounting rootfs"

mount "${found_image}" "${mpoint}" || error "Unable to mount image"

trap cleanup EXIT

# Extract payload
info "Extracting payload from zip file"

unzip -o -d "${workdir}" "${ZIP}" -x "META-INF/*" || error "Unable to extract payload"

# Finally untar the payload ontop the rootfs
info "Installing payload onto the rootfs"

tar -xf "${workdir}/payload.tar" -C "${mpoint}" || error "Unable to install payload"

# Enter chroot to finish setup
info "Entering chroot to finialize setup"

cat << EOF | chroot "${mpoint}" /bin/bash
PATH=/bin:/usr/bin
systemctl reenable wlan.service
systemctl reenable ipafw.service
systemctl reenable upower.service
systemctl mask systemd-journald.service
usermod -aG android_inet root
usermod -aG android_inet_raw root
usermod -g 3003 _apt
EOF

# If we should flash the kernel, do it
if [ -e "${workdir}/boot.img" ]; then
	info "Kernel found, flashing"

	if [ -e "${workdir}/dtbo.img" ]; then
		has_dtbo="yes"
	else
		has_dtbo="no"
	fi

	if [ -e "${workdir}/vbmeta.img" ]; then
		has_vbmeta="yes"
	else
		has_vbmeta="no"
	fi

	current_slot=$(grep -o 'androidboot\.slot_suffix=_[a-b]' /proc/cmdline)
	case "${current_slot}" in
		"androidboot.slot_suffix=_a")
			target_partition="boot_a"
			target_dtbo_partition="dtbo_a"
			target_vbmeta_partition="vbmeta_a"
			;;
		"androidboot.slot_suffix=_b")
			target_partition="boot_b"
			target_dtbo_partition="dtbo_b"
			target_vbmeta_partition="vbmeta_b"
			;;
		"")
			# No A/B
			target_partition="boot"
			target_dtbo_partition="dtbo"
			target_vbmeta_partition="vbmeta"
			;;
		*)
			error "Unknown error while searching for a boot partition, exiting"
			;;
	esac

	partition=$(find /dev/block/platform -name ${target_partition} | head -n 1)
	if [ -n "${partition}" ]; then
		info "Found boot partition for current slot ${partition}"

		dd if=${workdir}/boot.img of=${partition} || error "Unable to flash kernel"

		info "Kernel flashed"
	fi

	if [ "${has_dtbo}" = "yes" ]; then
		info "DTBO found, flashing"

		partition=$(find /dev/block/platform -name ${target_dtbo_partition} | head -n 1)
		if [ -n "${partition}" ]; then
			info "Found DTBO partition for current slot ${partition}"

			dd if=${workdir}/dtbo.img of=${partition} || error "Unable to flash DTBO"

			info "DTBO flashed"
		fi
	fi

	if [ "${has_vbmeta}" = "yes" ]; then
		info "VBMETA found, flashing"

		partition=$(find /dev/block/platform -name ${target_vbmeta_partition} | head -n 1)
		if [ -n "${partition}" ]; then
			info "Found VBMETA partition ${partition}"

			dd if=${workdir}/vbmeta.img of=${partition} || error "Unable to flash VBMETA"

			info "VBMETA flashed"
		fi
	fi

fi
