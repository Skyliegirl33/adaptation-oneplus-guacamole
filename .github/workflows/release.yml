# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the bullseye branch
  push:
    branches: [ bullseye ]
  pull_request:
    branches: [ bullseye ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  once:
    runs-on: ubuntu-20.04
    name: Create GitHub release
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}${{ steps.create_nightly.outputs.upload_url }}

    steps:
      - name: Create Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/droidian')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false

      - uses: dev-drprasad/delete-tag-and-release@v0.1.3
        if: startsWith(github.ref, 'refs/tags/droidian') != true
        with:
          delete_release: true # default: false
          tag_name: nightly # tag name to delete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag snapshot
        if: startsWith(github.ref, 'refs/tags/droidian') != true
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          tag: nightly

      - name: Create Release
        id: create_nightly
        if: startsWith(github.ref, 'refs/tags/droidian') != true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          release_name: nightly
          draft: false
          prerelease: true
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    needs: once

    strategy:
      fail-fast: true
      matrix:
        arch: [amd64]
        template: [kernel-builder]
        dist: [bullseye]
        namespace: [droidian]
        debos_arch: [arm64]

    name: ${{ matrix.template }}:${{ matrix.dist }} on ${{ matrix.debos_arch }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get current date
        run: echo "current_date=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Set suffix
        run: echo "release_suffix=_${{ env.current_date }}" >> $GITHUB_ENV

      - name: Checkout kernel source
        uses: actions/checkout@v2
        with:
          repository: Skyliegirl33/android_kernel_oneplus_sm8150
          ref: bullseye
          path: 'kernel'
          
      - name: Checkout initramfs builder
        uses: actions/checkout@v2
        with:
          repository: Skyliegirl33/initramfs-tools-halium

      - name: QEMU set-up
        uses: docker/setup-qemu-action@v1

      - name: Create build dir
        run: mkdir -p /tmp/buildd-results

      - name: Pull docker image
        run: docker pull quay.io/droidian/build-essential:bullseye-amd64

      - name: Build kernel
        uses: actions/checkout@v2
      - uses: addnab/docker-run-action@v3
        with:
          registry: quay.io
          image: quay.io/droidian/build-essential:bullseye-amd64
          options: -v /tmp/buildd-results:/buildd -v /dev:/dev -v /sys/fs/cgroup:/sys/fs/cgroup -v ${{ github.workspace }}/kernel:/buildd/sources
          run: |
            apt-get install -y linux-packaging-snippets
            cd /buildd/sources
            debian/rules debian/control
            RELENG_HOST_ARCH="arm64" releng-build-package

      - name: Upload kernel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.once.outputs.upload_url }}
          asset_path: ${PWD}/android_kernel_oneplus_sm8150/out/KERNEL_OBJ/boot.img
          asset_name: droidian-boot-${{ matrix.debos_arch }}-${{ env.release_suffix }}.zip
          asset_content_type: application/x-ima
